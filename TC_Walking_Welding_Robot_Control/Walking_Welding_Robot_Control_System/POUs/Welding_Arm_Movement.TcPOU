<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="Welding_Arm_Movement" Id="{be4647aa-b609-471d-9f30-0d85f817ad2b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Welding_Arm_Movement
VAR_INPUT
	// ===================模块动作信号(按动作先后排列)==========
	Power_Execute 		: BOOL;									// 上电使能控制信号
	Axis_Power			: ARRAY[1..MotorNum] OF BOOL;					// 单电机使能
	Welding_Arm_Power	: BOOL;									// 焊接臂所有电机使能
	
	Home_Execute		: BOOL;									// 设置零点程序使能

	Leg_Home_Set		: ARRAY[1..MotorNum] OF BOOL;	
	Axis_Home_Set		: ARRAY[1..MotorNum] OF BOOL;					// 单电机设定零点信号
	Welding_Arm_Home_Set		: BOOL;							// 焊接臂所有电机设定零点信号

	
	Move_Absolute_Execute		: BOOL;							// 绝对运动使能信号
	Move_Relative_Execute		: BOOL;							// 相对运动使能信号
	Welding_Arm_Move_Execute	: BOOL;							// 焊接臂运动程序使能	
	Axis_Absolute_Eable			: ARRAY[1..MotorNum] OF BOOL;			// 单电机绝对运动使能信号
	Axis_Relative_Eable			: ARRAY[1..MotorNum] OF BOOL;			// 单电机相对运动使能信号
	Welding_Arm_Absolute_Eable	: ARRAY[1..MotorNum] OF BOOL;			// 焊接臂站立使能信号
	Axis_Move_Absolute_Position	: ARRAY[1..MotorNum] OF LREAL;			// 电机绝对运动位置
	Axis_Move_Relative_Position	: ARRAY[1..MotorNum] OF LREAL;			// 电机相对运动位置			
	
	Reset_Execute		: BOOL;									// 电机驱动重置动作发生使能
	Axis_Reset			: ARRAY[1..MotorNum] OF BOOL;					// 单电机驱动重置信号使能
	Welding_Arm_Reset			: BOOL;							// 焊接臂整体电机驱动重置
	
	ExSetPoint_Execute	: BOOL;							// 机器人外部信号发生使能
	ExtSetPointEnable	: BOOL;							// 外部信号发生信号
	ExtSetPointDisable	: BOOL;							// 外部信号结束信号

END_VAR

VAR_OUTPUT
	Digital_Outputs AT%Q* : DINT;					// 数字输出信号（Link到驱动器中的Digital Outputs）
END_VAR

VAR
// =======================NC轴变量==========================
	Axis_Welding_Arm	: ARRAY[1..MotorNum] OF Axis;					// 定义焊接臂轴参量(可以调整数据上限来调整电机数目)
	Leg_Number			: INT;									// 定义焊接臂腿数
	Axis_Number 		: INT;									// 定义轴数目
	
	// ===================状态监测变量=======================
	Power_Status	: ARRAY[1..MotorNum] OF BOOL;						// 上电监测信号
	Leg_Home_Done	: ARRAY[1..MotorNum] OF BOOL;
	Home_Done		: ARRAY[1..MotorNum] OF BOOL;						// 找零监测信号
	MoveAbsoluteDone: ARRAY[1..MotorNum] OF BOOL;						// 电机绝对运动监测信号
	MoveRelativeDone: ARRAY[1..MotorNum] OF BOOL;						// 电机相对运动监测信号
	
	Welding_Arm_Error		: BOOL;								// 焊接臂电机错误信号
	Axis_Error		: ARRAY[1..MotorNum] OF BOOL;						// 电机错误监测信号
	Axis_ErrorID	: ARRAY[1..MotorNum] OF UDINT;						// 电机错误号码监测信号
	
	Axis_ActPostion	: ARRAY[1..MotorNum] OF LREAL;						// 电机轴实际位置
	Axis_ActVelocity: ARRAY[1..MotorNum] OF LREAL;						// 电机轴实际速度
	Mapping_ActPosition	: Variable_Control_Mapping_Model;		// 电机位置映射
	Motor_ActPosition	: ARRAY[1..MotorNum] OF LREAL;					// Mapping后的电机轴实际位置
	
	Current_Turque_Value  AT%IW0 : ARRAY[1..MotorNum] OF INT ;			// 电流、力矩相关值
	Digital_Inputs  AT%I* : ARRAY[1..MotorNum] OF DINT ;				// 数字输入信号（Link到驱动器中的Digital Inputs）
	
	Home_Switch_value : ARRAY[1..MotorNum] OF BOOL;					// 限位开关真假值
	
	Max_Turque_Value 		: INT ;								// 设置最大找零力矩边界值(机械限位法找零时用来判断运动极限位置)
	Switch_Home_Limit		: ARRAY[1..MotorNum] OF DINT ;				// 找零点时接触开关信号值

	Trigger: BOOL;												// The trigger for profile sensor
	
	LScanCounts			: INT;								// 已完成的激光线轮廓扫描数
	ScanTon				: TON;								// 扫描上升沿计时器
	ScanT				: TIME := T#2000MS;					// 扫描上升沿之后的高电平保持时间
	enableScan			: BOOL;								// 开始激光扫描信号
	Digital_Outputs_16: BOOL;
	
	// ====================Simulink模块相关=====================
	Welding_Arm_Simulink		: FB_WeldingArm6AxisMotion_Control(oid:=16#01010050);	// Simulink模型定义
	
		// -- 输入 --
	t_Interval			: LREAL:=0.001;						// 取样时间间隔，默认为1ms
	t					: LREAL:=0;							// 取样当前时间变量，以0为起点
		// -- 输出 --
	T_ALL				: LREAL:=100;						// Simulink模型运动总时长
	ExSetPoint_Position	: ARRAY[1..6] OF LREAL;				// 外部信号位置

	pos_up: LREAL;
	pos_down: LREAL;
	range_v: LREAL;
	pos_far: LREAL;
	pos_near: LREAL;
	range_h: LREAL;
END_VAR

VAR CONSTANT
	MotorNum			: INT := 6;								// 接入控制的电机数量
	
	LScanStepSize		: LREAL := 5;							// 激光扫描步长（LaserScanStepSize），对应电机转角（测试代码）
	LScanRange			: LREAL := 360;							// 激光扫描范围（LaserScanRange），对应电机总转角（测试代码）
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// =======================子程序使能(永久运行)===================
Variable_Monitor();			// 变量监测子程序使能
Logic_Control();			// 逻辑控制子程序使能
Variable_Set();				// 变量设置
Welding_Arm_Action();				// 焊接臂整体运动子程序使能
//Safety();					// 保证丝杠行程和电机速度在规定范围内

// =====================电机驱动重置=============================
IF Reset_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF

// =======================电机上电===============================
IF Power_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// =======================找零程序===============================
IF Home_Execute THEN
	// 如果用模型控制，必须加上下面一句话
	Welding_Arm_Simulink.Execute();	// Simulink模型使能
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		//Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].20;		// 试验台电机接近开关标识位
//		IF Axis_Number = 1 THEN
//			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].18;		// 焊接臂升降电机接近开关(上)标识位
//		ELSIF Axis_Number = 2 THEN
//			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].18;
//		ELSIF Axis_Number = 3 THEN
			// 加入竖直旋转电机后 Digital_Inputs[2].20 需改为 Digital_Inputs[3].20
//			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].21;		// 焊接臂径向电机接近开关(靠近电机侧)标识位
//		END_IF

		IF Axis_Number = 3 THEN
			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].21;		// 焊接臂径向电机接近开关(靠近电机侧)标识位
		ELSE
			Home_Switch_value[Axis_Number] := Digital_Inputs[Axis_Number].18;
		END_IF
		
		Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := Home_Switch_value[Axis_Number]);
	END_FOR
END_IF

// =======================绝对移动程序===============================
IF Move_Absolute_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Move_Absolute(	Drive_Move_Absolute:= Axis_Absolute_Eable[Axis_Number], 
														Absolute_Position:= Axis_Move_Absolute_Position[Axis_Number]);
	END_FOR
END_IF

// =======================相对移动程序===============================
IF Move_Relative_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Move_Relative(	Drive_Move_Relative:= Axis_Relative_Eable[Axis_Number], 
														Relative_Position:= Axis_Move_Relative_Position[Axis_Number]);
	END_FOR
END_IF

// =================线激光测量触发信号生成程序===================
ScanTon(IN:= enableScan , PT:= ScanT , Q=> , ET=> );

IF Trigger AND (NOT MoveRelativeDone[1]) AND (NOT Digital_Outputs.16)THEN
	Axis_Relative_Eable[1] := TRUE;
END_IF


IF NOT Axis_Relative_Eable[1] AND Trigger THEN
	enableScan := TRUE;
ELSE
	enableScan := FALSE;
END_IF

IF enableScan THEN
	// 输出一定长度的高电平;
	Digital_Outputs.16 := NOT ScanTon.Q;
	Digital_Outputs_16 := Digital_Outputs.16;
	Axis_Relative_Eable[1] := FALSE;
ELSE
	Digital_Outputs.16 := 0;
END_IF

IF Trigger THEN
	IF LScanCounts < LScanRange/LScanStepSize THEN
		IF MoveRelativeDone[1] THEN
			LScanCounts := LScanCounts + 1;
		END_IF		
	END_IF
ELSE
	Digital_Outputs :=0;
END_IF

IF LScanCounts >= LScanRange/LScanStepSize THEN
	Trigger :=0;
	LScanCounts := 0;
END_IF

// =======================外部信号运动程序=======================
IF ExSetPoint_Execute THEN
	//SetGenerator();			// 使能外部信号发生子程序
	Welding_Arm_Simulink.Execute();	// Simulink模型使能
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].ExtSetPoint(Drive_ExtSetPointEnable:= ExtSetPointEnable, 
											Drive_ExtSetPointDisable:= ExtSetPointDisable, 
											ExSetPosition:= ExSetPoint_Position[Axis_Number]);
	END_FOR
	//	Axis_Welding_Arm[1].ExtSetPoint(Drive_ExtSetPointEnable:= ExtSetPointEnable, 
	//										Drive_ExtSetPointDisable:= ExtSetPointDisable, 
	//										ExSetPosition:= ExSetPoint_Position[1]);
	//	Axis_Welding_Arm[3].ExtSetPoint(Drive_ExtSetPointEnable:= ExtSetPointEnable, 
	//										Drive_ExtSetPointDisable:= ExtSetPointDisable, 
	//										ExSetPosition:= ExSetPoint_Position[3]);
END_IF]]></ST>
    </Implementation>
    <Action Name="Logic_Control" Id="{4f843fbd-5dc4-4e5a-a52c-9b7792d3b0ab}">
      <Implementation>
        <ST><![CDATA[// =======================控制逻辑区==========================
// 保证所有的动作拥有合理的先后顺序，优化控制逻辑
// 也防止出现两个或两个以上动作同时进行的情况，保证控制安全

// ===================电机驱动重置逻辑========================
//IF Axis_Error[1] OR Axis_Error[2] OR Axis_Error[3] OR Axis_Error[4] OR Axis_Error[5] OR Axis_Error[6] THEN
//	Welding_Arm_Error := TRUE;
//ELSE
//	Welding_Arm_Error := FALSE;
//END_IF
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	IF Axis_Error[Axis_Number] THEN
		Welding_Arm_Error := TRUE;
		EXIT;
	END_IF
	Welding_Arm_Error := FALSE;
END_FOR

IF Welding_Arm_Error THEN
	Reset_Execute := TRUE;
ELSIF NOT Welding_Arm_Error THEN
	Reset_Execute := FALSE;
ELSIF NOT Reset_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Reset[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
	END_FOR
END_IF

// =====================上电程序逻辑==========================
IF NOT Power_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Power[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Power(Axis_Enable:= Axis_Power[Axis_Number]);
	END_FOR
END_IF

// =====================找零程序逻辑==========================
IF Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF Home_Done[Axis_Number] THEN			// 	丝杠到达零点位置后，单电机标零使能位关闭			
			Axis_Home_Set[Axis_Number] := FALSE;	
			Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := NOT Home_Switch_value[Axis_Number]);
		END_IF
	END_FOR
	Move_Absolute_Execute := FALSE;							// 设定零点时，不能进行其他运动
	//ExSetPoint_Execute :=0;
ELSIF NOT Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		//Axis_Start_Back[Axis_Number] :=0;
		Axis_Home_Set[Axis_Number] := FALSE;
	END_FOR
END_IF

// =====================焊接臂绝对运动逻辑==========================
IF Move_Absolute_Execute THEN
	//Absolute_Eable := TRUE;
	Home_Execute := FALSE;							// 运动运动使能时，焊接臂调零必须结束
	//ExSetPoint_Execute :=0;						// 运动运动时，不能进行其他运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF MoveAbsoluteDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机绝对运动使能位关闭
			Axis_Absolute_Eable[Axis_Number] := FALSE;
		END_IF
	END_FOR
ELSIF NOT Move_Absolute_Execute THEN							// 运动不使能,轴不能运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Absolute_Eable[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Move_Absolute(  Drive_Move_Absolute:= Axis_Absolute_Eable[Axis_Number], 
													  Absolute_Position:= Axis_Move_Absolute_Position[Axis_Number]);
	END_FOR
END_IF

// =====================焊接臂相对运动逻辑==========================
IF Move_Relative_Execute THEN
	//Relative_Eable := TRUE;
	Home_Execute := FALSE;							// 运动运动使能时，焊接臂调零必须结束
	//ExSetPoint_Execute :=0;						// 运动运动时，不能进行其他运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		IF MoveRelativeDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机相对运动使能位关闭
			Axis_Relative_Eable[Axis_Number] := FALSE;
			Axis_Welding_Arm[Axis_Number].Move_Relative(  Drive_Move_Relative:= Axis_Relative_Eable[Axis_Number], 
													  Relative_Position:= Axis_Move_Relative_Position[Axis_Number]);
		END_IF
	END_FOR
ELSIF NOT Move_Relative_Execute THEN							// 运动不使能,轴不能运动
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Relative_Eable[Axis_Number] := FALSE;
		Axis_Welding_Arm[Axis_Number].Move_Relative(  Drive_Move_Relative:= Axis_Relative_Eable[Axis_Number], 
													  Relative_Position:= Axis_Move_Relative_Position[Axis_Number]);
	END_FOR
END_IF

// =====================外部信号发生逻辑========================
IF ExSetPoint_Execute THEN
	Home_Execute := FALSE;						// 外部信号发生使能时，机器人调零必须结束
ELSIF NOT ExSetPoint_Execute THEN
	ExtSetPointEnable := 0;						// 外部信号发生不使能时，外部信号不能进入程序
	ExtSetPointDisable :=0;
ELSIF ExtSetPointDisable THEN
	ExtSetPointEnable :=0;						// 外部信号发生停止与外部信号发生开始不能同时进行
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Safety" Id="{cb94ea09-b07e-4169-b491-ec9bda178e37}">
      <Implementation>
        <ST><![CDATA[// 保证丝杠行程和电机速度在规定范围内

// 如果没在找零，检测到焊接臂升降或径向关节接近开关信号即停止焊接臂上所有电机
IF NOT Home_Execute THEN
	// Digital_Inputs[1].19 为焊接臂升降电机接近开关(下)标识位
	// Digital_Inputs[3].20 为焊接臂径向电机接近开关(远离电机侧)标识位
	IF Digital_Inputs[1].18 OR Digital_Inputs[1].19 OR Digital_Inputs[3].20 OR Digital_Inputs[3].21 THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			//Axis_Power[Axis_Number] := FALSE;
		END_FOR
	END_IF
END_IF

//IF Digital_Inputs[1].18 THEN
//	pos_up := Axis_Welding_Arm[1].ActPosition;
//	range_v := pos_down - pos_up;
//	Axis_Power[1] := FALSE;
//END_IF
//IF Digital_Inputs[1].19 THEN
//	pos_down := Axis_Welding_Arm[1].ActPosition;
//	Axis_Move_Relative_Position[1] := -300;
//ELSE
//	Axis_Move_Relative_Position[1] := 200;
//END_IF

//IF Digital_Inputs[2].20 THEN
//	pos_far := Axis_Welding_Arm[2].ActPosition;
//	range_h := pos_far - pos_near;
//	Axis_Power[2] := FALSE;
//END_IF
//IF Digital_Inputs[2].21 THEN
//	pos_near := Axis_Welding_Arm[2].ActPosition;

//	Axis_Move_Relative_Position[2] := 200;
//ELSE
//	Axis_Move_Relative_Position[2] := 3;
//END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Monitor" Id="{b0869ebc-a6ac-48e5-ba91-12bfa9a9c451}">
      <Implementation>
        <ST><![CDATA[// =====================关键数据信号监测======================

// ==============最大力矩设置区(边界控制条件)=================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Welding_Arm[Axis_Number].Max_Turque_Value := Max_Turque_Value;
END_FOR

// =======================力矩检测区==========================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Welding_Arm[Axis_Number].Current_Turque_Value := Current_Turque_Value[Axis_Number];
END_FOR

// ====================轴实际位置、速度检测区=======================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_ActPostion[Axis_Number] := Axis_Welding_Arm[Axis_Number].ActPosition;
	Axis_ActVelocity[Axis_Number] := Axis_Welding_Arm[Axis_Number].ActVelocity;
END_FOR

// =======================上电状态检测区======================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Power_Status[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_PowerStatus;
END_FOR

// =======================找零状态检测区======================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Home_Done[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_HomeDone;
END_FOR

// ===================电机绝对运动状态检测区==================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	MoveAbsoluteDone[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_MoveAbsoluteDone;
END_FOR

// ===================电机相对运动状态检测区==================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	MoveRelativeDone[Axis_Number] := Axis_Welding_Arm[Axis_Number].State_MoveRelativeDone;
END_FOR

// =======================电机错误检测区======================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Error[Axis_Number] := Axis_Welding_Arm[Axis_Number].Axis_Error;
	Axis_ErrorID[Axis_Number] := Axis_Welding_Arm[Axis_Number].Axis_ErrorID;
END_FOR
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Variable_Set" Id="{0c9b20e7-cb7c-4e67-a1cb-8d148b658bbf}">
      <Implementation>
        <ST><![CDATA[// =======================速度规定区==========================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO							//此时每一个电机的速度都是一样的
	Axis_Welding_Arm[Axis_Number].Home_Velocity 	:= 5;			//找零速度(Axis_Jog中的速度)
	Axis_Welding_Arm[Axis_Number].Move_Relative_Velocity	:=5;	//相对运动速度
END_FOR
IF Home_Execute THEN
	//IF Welding_Arm_Home_Set THEN
	//	Axis_Welding_Arm[1].Move_Absolute_Velocity :=20; Axis_Welding_Arm[2].Move_Absolute_Velocity :=20; Axis_Welding_Arm[3].Move_Absolute_Velocity :=20;
	//	Axis_Welding_Arm[4].Move_Absolute_Velocity :=20; Axis_Welding_Arm[5].Move_Absolute_Velocity :=20; Axis_Welding_Arm[6].Move_Absolute_Velocity :=20;
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Welding_Arm[Axis_Number].Move_Absolute_Velocity := 5;	//找零之后运动至轨迹起始点的速度
	END_FOR
ELSE
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Welding_Arm[Axis_Number].Move_Absolute_Velocity	:=10;
	END_FOR
END_IF
	

// =======================绝对运动位置规定区==========================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	Axis_Move_Absolute_Position[Axis_Number] := 100;
END_FOR

// =======================相对运动位置规定区==========================
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
//	Axis_Move_Relative_Position[Axis_Number] := 360;
//	Axis_Move_Relative_Position[Axis_Number] := LScanStepSize;
	Axis_Move_Relative_Position[Axis_Number] := -15;
END_FOR

// =====================最大力矩规定区========================
Max_Turque_Value := 1400;

// =====================零位传感器限值规定区========================
//Switch_Home_Limit[1]	:= -64028672;
//Switch_Home_Limit[2]	:= 100000;
//Switch_Home_Limit[3]	:= 100000;
//Switch_Home_Limit[4]	:= 100000;
//Switch_Home_Limit[5]	:= 100000;
//Switch_Home_Limit[6]	:= 100000;
//FOR Axis_Number := 1 TO MotorNum {BY 1} DO
//	Switch_Home_Limit[Axis_Number]	:= -64028672;
//END_FOR

// ============电机设置零点后到达位置规定区================
IF Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		//Axis_Welding_Arm[Axis_Number].Home_Absolute_Position := 20;
		
		// 如果电机找零调试结束，用下面的语句进行控制，保证找零后的位置为模型起始点
		Axis_Welding_Arm[Axis_Number].Home_Absolute_Position := ExSetPoint_Position[Axis_Number];
	END_FOR
END_IF

// =================线激光测量参数设置区===================

// ===================程序与模型的变量链接===================

	// -- 输入 -- 
Welding_Arm_Simulink.stInput.t := t;								// 采样时间t与Simulink模型中的采样时间链接

	// -- 输出 -- 
T_ALL := Welding_Arm_Simulink.stOutput.T_ALL;
FOR Axis_Number := 1 TO MotorNum {BY 1} DO
	ExSetPoint_Position[Axis_Number] := Welding_Arm_Simulink.stOutput.Disp_J[Axis_Number-1]; // Simulink中的电机输出位移输入到控制模型
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="Welding_Arm_Action" Id="{15678730-169a-4199-be27-f48665508e4b}">
      <Implementation>
        <ST><![CDATA[// =================焊接臂整体运动命令区======================
// 六足所有电机整体控制

// ====================焊接臂驱动重置=========================
IF Welding_Arm_Reset THEN							// 缺少输入
	IF Reset_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Reset[Axis_Number] := TRUE;
			Axis_Welding_Arm[Axis_Number].Reset(Drive_Reset:= Axis_Reset[Axis_Number]);
		END_FOR
	END_IF
END_IF	

// ===================焊接臂所有电机上电======================
IF Welding_Arm_Power THEN	
	IF Power_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Power[Axis_Number] := TRUE ;
		END_FOR
	END_IF
END_IF
	
// ===================焊接臂找零程序=======================
IF Welding_Arm_Home_Set THEN				// 标零程序
	//Welding_Arm_Start_Back := FALSE;
	IF Home_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			IF NOT Home_Done[Axis_Number] THEN
				Axis_Home_Set[Axis_Number] := TRUE;
				Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := NOT Home_Switch_value[Axis_Number]);
			ELSIF Home_Done[Axis_Number] THEN
				Axis_Home_Set[Axis_Number] := FALSE;
				Axis_Welding_Arm[Axis_Number].Home_Sensor_Backward(	Drive_Home:= Axis_Home_Set[Axis_Number], 
													Home_Switch := NOT Home_Switch_value[Axis_Number]);
			END_IF
		END_FOR
	ELSIF NOT Home_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			Axis_Home_Set[Axis_Number] := FALSE;
		END_FOR
	END_IF
ELSIF NOT Welding_Arm_Home_Set AND NOT Home_Execute THEN
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Home_Set[Axis_Number] := FALSE;
	END_FOR
END_IF

// =====================绝对运动程序===============================
IF Welding_Arm_Move_Execute THEN
	IF Move_Absolute_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			IF MoveAbsoluteDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机绝对运动使能位关闭
				Axis_Absolute_Eable[Axis_Number] := FALSE;
			ELSE
				Axis_Absolute_Eable[Axis_Number] := TRUE;
			END_IF
		END_FOR
	END_IF
ELSIF NOT Welding_Arm_Move_Execute AND NOT Move_Absolute_Execute THEN 
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Absolute_Eable[Axis_Number] := FALSE;
	END_FOR
END_IF

// =====================相对运动程序===============================
IF Welding_Arm_Move_Execute THEN
	IF Move_Relative_Execute THEN
		FOR Axis_Number := 1 TO MotorNum {BY 1} DO
			IF MoveRelativeDone[Axis_Number] THEN		// 	丝杠到达设定位置后，单电机相对运动使能位关闭
				Axis_Relative_Eable[Axis_Number] := FALSE;
			ELSE
				Axis_Relative_Eable[Axis_Number] := TRUE;
			END_IF
		END_FOR
	END_IF
ELSIF NOT Welding_Arm_Move_Execute AND NOT Move_Relative_Execute THEN 
	FOR Axis_Number := 1 TO MotorNum {BY 1} DO
		Axis_Relative_Eable[Axis_Number] := FALSE;
	END_FOR
END_IF

// ======================外部信号发生=========================
IF ExtSetPointEnable THEN	
	//FOR Axis_Number := 1 TO 2 {BY 1} DO
	t := t + t_Interval;
	ExtSetPointDisable := FALSE;
	//END_FOR
END_IF

IF t>=T_ALL THEN
	ExtSetPointEnable := FALSE;
	t:=0;
	ExtSetPointDisable := TRUE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Welding_Arm_Movement">
      <LineId Id="3" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="1582" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="9" Count="15" />
      <LineId Id="1355" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="434" Count="0" />
      <LineId Id="1565" Count="0" />
      <LineId Id="1450" Count="0" />
      <LineId Id="1566" Count="0" />
      <LineId Id="1686" Count="0" />
      <LineId Id="1570" Count="0" />
      <LineId Id="1683" Count="1" />
      <LineId Id="1682" Count="0" />
      <LineId Id="1687" Count="2" />
      <LineId Id="1691" Count="1" />
      <LineId Id="1690" Count="0" />
      <LineId Id="1544" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="431" Count="0" />
      <LineId Id="27" Count="9" />
      <LineId Id="494" Count="2" />
      <LineId Id="505" Count="4" />
      <LineId Id="375" Count="0" />
      <LineId Id="731" Count="0" />
      <LineId Id="1046" Count="0" />
      <LineId Id="1112" Count="4" />
      <LineId Id="1143" Count="0" />
      <LineId Id="1117" Count="0" />
      <LineId Id="1119" Count="0" />
      <LineId Id="1133" Count="1" />
      <LineId Id="1120" Count="0" />
      <LineId Id="1148" Count="0" />
      <LineId Id="1123" Count="1" />
      <LineId Id="1126" Count="0" />
      <LineId Id="1135" Count="0" />
      <LineId Id="1150" Count="0" />
      <LineId Id="1128" Count="2" />
      <LineId Id="1122" Count="0" />
      <LineId Id="1052" Count="0" />
      <LineId Id="1154" Count="0" />
      <LineId Id="1140" Count="2" />
      <LineId Id="1155" Count="0" />
      <LineId Id="1090" Count="2" />
      <LineId Id="1110" Count="1" />
      <LineId Id="1053" Count="0" />
      <LineId Id="1160" Count="0" />
      <LineId Id="1159" Count="0" />
      <LineId Id="751" Count="0" />
      <LineId Id="1253" Count="8" />
      <LineId Id="1793" Count="5" />
      <LineId Id="1262" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Movement.Logic_Control">
      <LineId Id="2" Count="3" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="3" />
      <LineId Id="88" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="16" Count="5" />
      <LineId Id="84" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="24" Count="15" />
      <LineId Id="87" Count="0" />
      <LineId Id="40" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="82" Count="0" />
      <LineId Id="59" Count="20" />
      <LineId Id="95" Count="8" />
      <LineId Id="113" Count="1" />
      <LineId Id="104" Count="8" />
      <LineId Id="115" Count="3" />
      <LineId Id="120" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Movement.Safety">
      <LineId Id="12" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="37" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="43" Count="3" />
      <LineId Id="56" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="62" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Movement.Variable_Monitor">
      <LineId Id="2" Count="9" />
      <LineId Id="46" Count="0" />
      <LineId Id="13" Count="2" />
      <LineId Id="47" Count="0" />
      <LineId Id="16" Count="10" />
      <LineId Id="31" Count="4" />
      <LineId Id="48" Count="4" />
      <LineId Id="36" Count="6" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Movement.Variable_Set">
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="120" Count="2" />
      <LineId Id="63" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="123" Count="3" />
      <LineId Id="129" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="108" Count="2" />
      <LineId Id="112" Count="7" />
      <LineId Id="15" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="153" Count="1" />
      <LineId Id="152" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="1" />
      <LineId Id="133" Count="2" />
      <LineId Id="142" Count="2" />
      <LineId Id="160" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Welding_Arm_Movement.Welding_Arm_Action">
      <LineId Id="2" Count="4" />
      <LineId Id="8" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="9" Count="14" />
      <LineId Id="31" Count="2" />
      <LineId Id="90" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="99" Count="1" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="85" Count="0" />
      <LineId Id="55" Count="21" />
      <LineId Id="106" Count="26" />
      <LineId Id="137" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>