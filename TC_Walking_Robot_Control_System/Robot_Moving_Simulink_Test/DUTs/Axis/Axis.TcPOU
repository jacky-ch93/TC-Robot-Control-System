<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="Axis" Id="{0297b320-2572-4a6c-bc14-a7635e231c4f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Axis
//VAR_INPUT	
//END_VAR
VAR_OUTPUT
	Axis_Error			: BOOL;				// Error signal
	Axis_ErrorID		: UDINT;			// Error ID
	Axis_Moves			: BOOL;				// Status of moving
END_VAR
VAR
	// =============== Done signals MC Block =================
	JogDone			    : BOOL;					// Status of function block MC_Jog
	ResetDone		    : BOOL;					// Status of function block MC_Reset
	HaltDone		    : BOOL;					// Status of function block MC_Halt
	HomeDone		    : BOOL;					// Status of function block MC_Home
  	MoveAbsoluteDone : BOOL;        // Status of function block MC_MoveAbsolute
  	ExtSetPiontDone 	: BOOL;         		// Status of function block MC_ExtSetPointGenDisable

	// =============== Control variables ======================
	//Home_Back_Start	: BOOL;
	//Drive_Home		: BOOL;
	
	// =============== State variables ========================
	Power_StatusEnable	: BOOL;					// Enable feedback
	
	// ============= Velocity, override ,Position==============
	Velocity_Jog		: LREAL;				// Jog velocity
	Velocity_Move		: LREAL;				// Target velocity
	Velocity_Home		: LREAL;				// Home velocity
	Velocity_Absolute	: LREAL;				// MoveAbsolute velocity
	Velocity_Relative	: LREAL;				// MoveRelative velocity
	fOverride 			: LREAL := 100.0;		// Override 100%
  	Home_Position   : LREAL;        // The absolute position after Home will be
	
	// =============== Trigger function blocks ================
	
	TriggerHalt	: R_TRIG;				// Trigger to recognize rising edge of halt input
	TriggerReset : R_TRIG;				// Trigger to recognize rising edge of reset input
	
	// =============== Axis reference =========================
	AxisRef			: AXIS_REF;				// Axis reference (process data plc/nc)
	
	// =============== About axis turque ====================
	Axis_Current_Turque 	: INT;
  	Axis_Max_Turque       	: INT;

	// ================= Sensor FeedBack ====================
  	Proximity_Switch      : DINT;
	
	// =============== Motion function blocks =================
	Axis_Power 			: MC_Power;				// FB for enable and override			[上电]
	Axis_Home			: MC_Home;				// FB for axis home						[找零]
	Axis_Reset 			: MC_Reset;				// FB to reset axis						[复位]
	Axis_Jog			: MC_Jog;				// FB to jog axis						[点动]
	Axis_Stop 			: MC_Stop;				// FB to stop axis						[停止]
	Axis_Halt			: MC_Halt;				// FB to halt axis						[停止]
	Axis_Move			: MC_MoveVelocity;		// FB to move axis (velocity movement)	[匀速运动]
	Axis_MoveAbsolute 	: MC_MoveAbsolute;		// FB to move axis absolutely			[绝对位置运动]
	Axis_MoveRelative	: MC_MoveRelative;		// FB to move axis relatively			[相对位置运动]
  	Axis_ActPosition  	: MC_ReadActualPosition;// FB to read the actual position of axis [读取电机轴的实际位置]
	Axis_ActVelocity	: MC_ReadActualVelocity;// FB to read the actual Velocity of axis [读取电机轴的实际速度]
	Axis_ExtSetPiontEnable	: MC_ExtSetPointGenEnable;	// FB to enable extsetpoint		[外部函数发生使能]
	Axis_ExtSetPiontDisable	: MC_ExtSetPointGenDisable;	// FB to disable extsetpoint	[外部函数结束使能]
  
  	// =============== Timer =================
  	Delay         : TON;          //[定时器]
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ActPosition" Id="{0d8ebaa4-7aa1-4383-80ec-d1bd4628f665}">
      <Declaration><![CDATA[PROPERTY ActPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{e48baacc-021b-4023-a440-2ca5f997647d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_ActPosition( Axis:= AxisRef, Enable:= TRUE );
ActPosition := Axis_ActPosition.Position;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ActVelocity" Id="{9b54bb16-bef1-4737-93a0-d686d6881565}">
      <Declaration><![CDATA[PROPERTY ActVelocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{620d56ba-2ff0-4a80-aa97-3ed6a45a0fa2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_ActVelocity( Axis:= AxisRef, Enable:= TRUE,  ActualVelocity=> ActVelocity);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Current_Turque_Value" Id="{7b4cbfca-b1a0-4ffe-a8fa-26e268dc2f54}">
      <Declaration><![CDATA[PROPERTY Current_Turque_Value : INT]]></Declaration>
      <Get Name="Get" Id="{4f6055aa-a8ec-4d0e-add1-153698558955}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Current_Turque_Value := Axis_Current_Turque;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{71549ae3-a22a-408d-856c-aa31b83fdcc1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_Current_Turque := Current_Turque_Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ExtSetPoint" Id="{b01fe496-a51a-486b-8285-43d5d90a9fa4}">
      <Declaration><![CDATA[METHOD ExtSetPoint
VAR_INPUT
	Drive_ExtSetPointEnable 	: BOOL;		// 使能外部信号开始信号
	Drive_ExtSetPointDisable 	: BOOL;		// 使能外部信号结束信号
	ExSetPosition				: LREAL;	// 外部信号位置
	//Axis_Current_Turque 		: INT;		// 边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================外部信号发生程序==========================

IF NOT Axis_ExtSetPiontEnable.Error THEN
	Axis_ExtSetPiontEnable(	Axis:= AxisRef, 
							Execute:= Drive_ExtSetPointEnable, 
							Position:= ExSetPosition, 
							PositionType:= POSITIONTYPE_ABSOLUTE );
END_IF

IF Axis_ExtSetPiontEnable.Done THEN
	ExtSetPiontDone := 1;
	MC_ExtSetPointGenFeed(	Position:= ExSetPosition, 
							Velocity:= 10, 
							Acceleration:= 10, 
							Direction:= 1, 		// 1 = positive direction
							Axis:= AxisRef );
END_IF	

IF NOT Axis_ExtSetPiontDisable.Error THEN 
	Axis_ExtSetPiontDisable(	Axis:= AxisRef, 
								Execute:= Drive_ExtSetPointDisable);
END_IF
								
IF Axis_ExtSetPiontEnable.Error OR Axis_ExtSetPiontDisable.Error OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_ExtSetPiontEnable.Error OR Axis_ExtSetPiontDisable.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Home.ErrorID;
	END_IF
	Axis_ExtSetPiontEnable(	Axis:= AxisRef, 
							Execute:= 0 );
	Axis_ExtSetPiontDisable(	Axis:= AxisRef, 
								Execute:= 1);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{9bde2e9b-f9ec-4d6a-b4c6-7b681ff2824e}">
      <Declaration><![CDATA[METHOD Halt : BOOL
VAR_INPUT
	DriveHalt		: BOOL;					// Request stop
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================电机运动停止程序==========================

IF DriveHalt THEN
	// Move Execute FALSE
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
ELSE
	// Reset done signal
	HaltDone := FALSE;
END_IF

// Trigger
TriggerHalt(CLK := DriveHalt);

IF TriggerHalt.Q THEN
	Axis_Halt(	Execute	:= TRUE,
				Axis 	:= AxisRef);
ELSE
	Axis_Halt(Axis := AxisRef);
END_IF

// Done / Error / Command aborted
IF Axis_Halt.Done OR Axis_Halt.Error OR Axis_Halt.CommandAborted THEN
	Axis_Error		:= Axis_Halt.Error;
	Axis_ErrorID 	:= Axis_Halt.ErrorID;
	HaltDone 		:= Axis_Halt.Done;
	
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
				
	Axis_Halt(	Execute	:= FALSE,
				Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{d86168e1-e554-4d6f-9617-4430fef5cab7}">
      <Declaration><![CDATA[METHOD Home
VAR_INPUT
	//Back_Start 				: BOOL;
	//Velocity_Home	:LREAL;
	//Axis_Current_Turque 	: INT;
	Drive_Home				: BOOL;			// 找原点的信号，TURE代表还在找原点过程中
END_VAR

VAR
	//HomeSet					: BOOL;
	BackDone				: BOOL;					// 电机退回到顶点位，该标志位使能
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================找零程序==========================
// 找零程序过程为：先让丝杠回退，到达机械限位后停止,并用程序将该位置置为零位

//======================丝杠回退========================
Jog_Backward(Drive_Jog_Backward:= (Drive_Home AND (NOT BackDone)));
Jog_Velocity := Velocity_Home;
HomeDone := Axis_MoveAbsolute.Done;					// 找零结束的标志为丝杠伸长到制定距离
	
IF NOT Axis_Home.Error THEN
	IF ABS(Axis_Current_Turque) > Axis_Max_Turque AND NOT BackDone THEN
		//Drive_Home :=0;
		Jog_Backward(Drive_Jog_Backward:= 0);
		Delay(IN:= NOT Delay.Q, PT:=T#200MS, Q=> , ET=> );
		Axis_Home( 	Axis:= AxisRef, 
					Execute:= Delay.Q, 
					Position:= 0, 
					HomingMode:= MC_Direct);
		BackDone := Axis_Home.Done;				
	END_IF
	IF BackDone AND Drive_Home THEN
		Move_Absolute(Drive_Move_Absolute:= TRUE, Absolute_Position:= Home_Position );
		IF Axis_MoveAbsolute.Done THEN
			BackDone := FALSE;
			Drive_Home	:= FALSE;
		END_IF
	END_IF
END_IF

(*IF HomeSet THEN
	Jog_Backward(Drive_Jog_Backward:= 0,  Axis_Current_Turque:= Axis_Current_Turque);
	HomeDone := 1;
END_IF*)

IF Axis_Home.Error OR Axis_Home.CommandAborted OR ABS(Axis_Current_Turque) < Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Home.ErrorID;
	END_IF
	Axis_Home( 	Axis:= AxisRef, 
				Execute:= FALSE);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Home_Absolute_Position" Id="{3378bb70-de70-49cb-860f-38d4b4ff35f9}">
      <Declaration><![CDATA[PROPERTY Home_Absolute_Position : LREAL]]></Declaration>
      <Get Name="Get" Id="{484802f3-f31e-42d9-b119-359ed2271159}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Home_Absolute_Position := Home_Position;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ccd846cd-1d85-412c-9446-94c278ec93d5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Home_Position := Home_Absolute_Position;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Home_Sensor" Id="{1c17b649-efcc-45bb-ae5e-9cf30a2d631f}">
      <Declaration><![CDATA[METHOD Home_Sensor
VAR_INPUT
	Drive_Home				: BOOL;			// 调零使能信号
	Home_Switch				: BOOL;			// 零位调零传感器信号
	//MaxPosition_Swicth		: BOOL;
END_VAR

VAR
	//HomeSet				: BOOL;
	BackDone				: BOOL;					// 电机退回到顶点位，该标志位使能
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================找零程序==========================
// 找零程序过程为：先让丝杠回退，当传感器检测到金属表面并反馈信号后, 程序将该位置置为零位

//======================丝杠回退========================
Jog_Backward(Drive_Jog_Backward:= Drive_Home);
Jog_Velocity := Velocity_Home;
HomeDone := Axis_MoveAbsolute.Done;					// 回到零点的标志为丝杠伸长到制定距离
	
IF NOT Axis_Home.Error THEN
	IF Home_Switch AND NOT HomeDone THEN
		Drive_Home :=0;
		Jog_Backward(Drive_Jog_Backward:= Drive_Home);
		Delay(IN:= NOT Delay.Q, PT:=T#200MS, Q=> , ET=> );
		Axis_Home( 	Axis:= AxisRef, 
					Execute:= Delay.Q,
					Position:= 0, 
					HomingMode:= MC_Direct);
		BackDone := Axis_Home.Done;
	END_IF
	IF BackDone THEN
		Move_Absolute(Drive_Move_Absolute:= TRUE, Absolute_Position:= 20);
		IF Axis_MoveAbsolute.Done THEN
			BackDone := FALSE;
		END_IF
	END_IF
END_IF

(*IF HomeSet THEN
	Jog_Backward(Drive_Jog_Backward:= 0,  Axis_Current_Turque:= Axis_Current_Turque);
	HomeDone := 1;
END_IF*)

IF Axis_Home.Error OR Axis_Home.CommandAborted OR ABS(Axis_Current_Turque) < Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Home.ErrorID;
	END_IF
	Axis_Home( 	Axis:= AxisRef, 
				Execute:= FALSE);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Home_Velocity" Id="{96940263-d7e2-4e23-8857-5d761e72d358}">
      <Declaration><![CDATA[PROPERTY Home_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{6657ae91-c5f5-4c30-92cc-4a0003b2769b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Home_Velocity := Velocity_Home;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{425a57d7-0c4e-4b3b-a589-0846a7d787f3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Home := Home_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Jog_Backward" Id="{a4c6da57-bf65-48fb-a6d6-b884dd02fec5}">
      <Declaration><![CDATA[METHOD Jog_Backward
VAR_INPUT
	Drive_Jog_Backward	: BOOL;				//点动后退使能信号
	//Velocity_Jog		: LREAL;			//点动速度
	//Axis_Current_Turque : INT;				//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================点动后退==========================
// 点动后退用在找零中的位置移动

IF NOT Axis_Jog.Error THEN
	Axis_Jog( 	Axis:= AxisRef, 
				JogForward:= 0, 
				JogBackwards:= Drive_Jog_Backward, 
				Mode:= MC_JOGMODE_CONTINOUS, 
				Velocity:= Velocity_Jog);
END_IF

IF Axis_Jog.Error OR Axis_Jog.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Jog.ErrorID;
	END_IF
	
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
END_IF

(*IF ABS(Axis_Current_Turque) <1000 AND JogDone =1 THEN
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
	JogDone :=0;
END_IF*)
				
// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Jog_Forward" Id="{4779dde2-f67f-4662-af9a-451a772d25d8}">
      <Declaration><![CDATA[METHOD Jog_Forward : BOOL
VAR_INPUT
	Drive_Jog_Forward	: BOOL;				//点动前进使能信号
	//Velocity_Jog		: LREAL;			//点动速度
	//Axis_Current_Turque : INT;				//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================点动前进==========================


IF NOT Axis_Jog.Error THEN
	Axis_Jog( 	Axis:= AxisRef, 
				JogForward:= Drive_Jog_Forward, 
				JogBackwards:= 0, 
				Mode:= MC_JOGMODE_CONTINOUS, 
				Velocity:= Velocity_Jog);
END_IF

IF Axis_Jog.Error OR Axis_Jog.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Jog.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Jog.ErrorID;
	END_IF
	
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
END_IF

(*IF ABS(Axis_Current_Turque) <1000 AND JogDone =1 THEN
	Axis_Jog(	JogForward:= 0, 
				JogBackwards:= 0, 
				Axis := AxisRef);
	JogDone :=0;
END_IF*)
				
// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Jog_Velocity" Id="{cb8b277a-51dd-4d89-91eb-c44bae373e36}">
      <Declaration><![CDATA[// =======================读写点动程序中的速度值==========================

PROPERTY Jog_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{41f1c919-9e35-4fb0-9d96-aacea9d69404}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Jog_Velocity := Velocity_Jog;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{57b804e1-59a5-4f7d-8e37-a2cef611381d}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Jog := Jog_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Max_Turque_Value" Id="{a1715295-6901-4254-8242-95c2727a170a}">
      <Declaration><![CDATA[PROPERTY Max_Turque_Value : INT]]></Declaration>
      <Set Name="Set" Id="{236201a5-52e3-49c6-9e09-32af45edae8a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Axis_Max_Turque := Max_Turque_Value;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Move_Absolute" Id="{12e32043-d091-4a80-be02-6ea3fbf6df52}">
      <Declaration><![CDATA[METHOD Move_Absolute
VAR_INPUT
	Drive_Move_Absolute : BOOL;				// 运动使能信号
	Absolute_Position	: LREAL;			// 绝对运动位置
	//Move_Velocity		: LREAL;			// 运动速度
	//Axis_Current_Turque : INT;			// 边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================绝对运动==========================

IF NOT Axis_MoveAbsolute.Error THEN
	Axis_MoveAbsolute(	Axis:= AxisRef, 
						Execute:= Drive_Move_Absolute, 
						Position:= Absolute_Position, 
						Velocity:= Velocity_Absolute, 
						BufferMode:= MC_Aborting );
	MoveAbsoluteDone := Axis_MoveAbsolute.Done;			// 运动到指定位置后置位
END_IF

IF Axis_MoveAbsolute.Error OR Axis_MoveAbsolute.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_MoveAbsolute.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_MoveAbsolute.ErrorID;
	END_IF
	
	Axis_MoveAbsolute(	Axis:= AxisRef, 
						Execute:= 0, 
						BufferMode:= MC_Aborting);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Move_Absolute_Velocity" Id="{49809bc4-abcc-4ce8-89db-0034251fcee4}">
      <Declaration><![CDATA[// =======================读写绝对运动程序中的速度值==========================

PROPERTY Move_Absolute_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{7369021a-0285-46f5-905e-1b1f49285dce}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Move_Absolute_Velocity := Velocity_Absolute;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f46af1a8-28ac-42f9-8dde-58159eb2bb7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Absolute := Move_Absolute_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Move_Backward" Id="{337e5803-e92f-4860-b95e-50cbd2141b68}">
      <Declaration><![CDATA[METHOD Move_Backward
VAR_INPUT
	Move_Backward_Start : BOOL;					//匀速后退使能信号
	//Axis_Current_Turque : INT;					//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================匀速后退==========================

// Not error
IF NOT Axis_Move.Error THEN
	Axis_Move(	Execute 	:= Move_Backward_Start,
				Velocity 	:= Velocity_Move,
				Direction 	:= MC_Negative_Direction,
				Axis 		:= AxisRef );
END_IF

// Error / Command aborted
IF Axis_Move.Error OR Axis_Move.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Move.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Move.ErrorID;
	END_IF
	
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Move_Fordward" Id="{056a50de-c086-4e3d-b569-34915d9bf6e9}">
      <Declaration><![CDATA[METHOD Move_Fordward
VAR_INPUT
	Move_Forward_Start : BOOL;					//匀速前进使能信号
	//Axis_Current_Turque : INT;					//边界条件：丝杠位置到达两端卡死
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================匀速前进==========================

// Not error
IF NOT Axis_Move.Error THEN
	Axis_Move(	Execute 	:= Move_Forward_Start,
				Velocity 	:= Velocity_Move,
				Direction 	:= MC_Positive_Direction,
				Axis 		:= AxisRef );
END_IF

// Error / Command aborted
IF Axis_Move.Error OR Axis_Move.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_Move.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_Move.ErrorID;
	END_IF
	
	Axis_Move(	Execute	:= FALSE,
				Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Move_Relative" Id="{7ef2e85a-fdb5-4050-b553-b09b1344ef61}">
      <Declaration><![CDATA[METHOD Move_Relative
VAR_INPUT
	Drive_Move_Relative		: BOOL;				// 运动使能信号
	Relative_Position		: LREAL;			// 相对运动位置
	//Move_Velocity			: LREAL;			// 运动速度
	//Axis_Current_Turque 	: INT;				// 边界条件：丝杠位置到达两端卡死
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================相对运动==========================

IF NOT Axis_MoveRelative.Error THEN
	Axis_MoveRelative(	Axis:= AxisRef, 
						Execute:= Drive_Move_Relative, 
						Distance:= Relative_Position, 
						Velocity:= Velocity_Relative, 
						BufferMode:= MC_Aborting );
END_IF

IF Axis_MoveRelative.Error OR Axis_MoveRelative.CommandAborted OR ABS(Axis_Current_Turque) > Axis_Max_Turque THEN
	IF Axis_MoveRelative.Error THEN
		Axis_Error		:= TRUE;
		Axis_ErrorID 	:= Axis_MoveRelative.ErrorID;
	END_IF
	
	Axis_MoveRelative(	Axis:= AxisRef, 
						Execute:= 0, 
						BufferMode:= MC_Aborting);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="Move_Relative_Velocity" Id="{a2007fa8-9136-4470-8a7c-08b36a802e9d}">
      <Declaration><![CDATA[// =======================读写相对运动程序中的速度值==========================

PROPERTY Move_Relative_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{c4832642-7098-4da2-8e93-c55fc0de36db}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Move_Relative_Velocity := Velocity_Relative;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6116d05f-7371-48c0-8b14-c261b37e515d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Relative := Move_Relative_Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Move_Velocity" Id="{baafb3de-c630-4f04-95b4-f2aab1391740}">
      <Declaration><![CDATA[PROPERTY Move_Velocity : LREAL]]></Declaration>
      <Get Name="Get" Id="{4796ecb7-0a7f-429e-8fac-0beaa3808b94}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Move_Velocity := Velocity_Move;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1a0bef2c-0a8e-4858-bcc9-d098a83b6365}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Velocity_Move :=Move_Velocity :=10;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Power" Id="{8e0af2d2-d23d-480b-b659-64465503fb47}">
      <Declaration><![CDATA[METHOD Power
VAR_INPUT
	Axis_Enable : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =======================上电程序==========================

Axis_Power(	Enable 			:= Axis_Enable, 
			Enable_Positive	:= Axis_Enable, 
			Enable_Negative	:= Axis_Enable, 
			Override		:= fOverride,
			Axis			:= AxisRef,
			Status			=> Power_StatusEnable);
			
IF Axis_Power.Error THEN
	Axis_Error		:= TRUE;
	Axis_ErrorID 	:= Axis_Power.ErrorID;
END_IF

AxisRef.ReadStatus();

Axis_Moves := AxisRef.Status.Moving;

// ==========================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{233649a1-433c-4eab-be04-eab312f72a15}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
	Drive_Reset		: BOOL;					// Request reset
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// =====================驱动重置程序==========================

IF NOT Drive_Reset THEN
	ResetDone 	:= FALSE;
END_IF

// Trigger(触发器)
TriggerReset(CLK := Drive_Reset);

IF TriggerReset.Q THEN
	HaltDone 	:= FALSE;
	
	Axis_Reset(Execute := TRUE, Axis := AxisRef);
ELSE
	Axis_Reset(Axis := AxisRef);
END_IF

// Done / Error
IF Axis_Reset.Done OR Axis_Reset.Error THEN
	Axis_Error		:= Axis_Reset.Error;
	Axis_ErrorID 	:= Axis_Reset.ErrorID;
	ResetDone 		:= Axis_Reset.Done;

	Axis_Reset(	Execute	:= FALSE, Axis 	:= AxisRef);
END_IF

// =========================================================]]></ST>
      </Implementation>
    </Method>
    <Property Name="State_ExtSetPiontDone" Id="{ca58efa5-bb89-4dcd-bf5d-a603ca9d5da9}">
      <Declaration><![CDATA[PROPERTY State_ExtSetPiontDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{b0107657-7a2a-47aa-a781-d15fcff43910}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_ExtSetPiontDone := ExtSetPiontDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_HomeDone" Id="{ce1f8c3e-68ec-4615-817a-025c75cd229d}">
      <Declaration><![CDATA[// =======================回零结束信号==========================

PROPERTY State_HomeDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{a3510f33-91cc-4bac-96b3-9bbfa1b167ab}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_HomeDone := HomeDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_JogDone" Id="{27688534-4098-40fc-954b-fa45a6971fca}">
      <Declaration><![CDATA[// =======================点动结束信号==========================

PROPERTY State_JogDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{51e746fe-f184-40ff-a6be-96a339aff0cb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_JogDone := JogDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_MoveAbsoluteDone" Id="{47f80986-d4c0-4164-a12a-52b14313e1fb}">
      <Declaration><![CDATA[PROPERTY State_MoveAbsoluteDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{323a086a-6a9f-4141-99e5-bda994083ecf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_MoveAbsoluteDone := MoveAbsoluteDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_PowerStatus" Id="{7d361c2d-372b-4089-b726-a08b81aa23c4}">
      <Declaration><![CDATA[// =======================上电状态信号==========================

PROPERTY State_PowerStatus : BOOL]]></Declaration>
      <Get Name="Get" Id="{de26ef6b-bed6-4c4e-aa47-ff43dbb3f9bf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_PowerStatus := Power_StatusEnable;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State_ResetDone" Id="{34f4e1b9-637c-4552-9456-8ec89e2b13d7}">
      <Declaration><![CDATA[// =======================复位结束信号==========================

PROPERTY State_ResetDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{fc972bcb-4a51-4a36-abba-59b2c1d449e3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State_ResetDone := ResetDone;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="Axis">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.ActPosition.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.ActVelocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Current_Turque_Value.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Current_Turque_Value.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.ExtSetPoint">
      <LineId Id="50" Count="8" />
      <LineId Id="89" Count="0" />
      <LineId Id="59" Count="13" />
      <LineId Id="79" Count="2" />
      <LineId Id="78" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Halt">
      <LineId Id="6" Count="33" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home">
      <LineId Id="196" Count="41" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Absolute_Position.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Absolute_Position.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Sensor">
      <LineId Id="6" Count="4" />
      <LineId Id="52" Count="0" />
      <LineId Id="11" Count="34" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Home_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Backward">
      <LineId Id="45" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="5" />
      <LineId Id="31" Count="0" />
      <LineId Id="12" Count="9" />
      <LineId Id="65" Count="4" />
      <LineId Id="78" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Forward">
      <LineId Id="3" Count="1" />
      <LineId Id="28" Count="6" />
      <LineId Id="11" Count="1" />
      <LineId Id="78" Count="15" />
      <LineId Id="71" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Jog_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Max_Turque_Value.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Absolute">
      <LineId Id="51" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="27" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="34" Count="6" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Absolute_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Absolute_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Backward">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Fordward">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Relative">
      <LineId Id="6" Count="2" />
      <LineId Id="32" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="13" Count="11" />
      <LineId Id="48" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Relative_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Relative_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Velocity.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Move_Velocity.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Power">
      <LineId Id="4" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.Reset">
      <LineId Id="3" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_ExtSetPiontDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_HomeDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_JogDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_MoveAbsoluteDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_PowerStatus.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Axis.State_ResetDone.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>